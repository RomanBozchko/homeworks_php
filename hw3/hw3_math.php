<?php//Работа с %//1. Даны переменные $a = 10 и $b = 3. Найдите остаток от//деления $a на $b.$a = 10;$b = 3;echo $a % $b;echo '<br><br>';//2. Даны переменные $a и $b. Проверьте, что $a делится без//остатка на $b. Если это так — выведите 'Делится' и результат//деления, иначе выведите 'Делится с остатком' и остаток от//деления.$a = 11;$b = 3;if (($a % $b) == 0) {    echo 'Делится: ' . $a / $b;} else {    echo 'Делится с остатком: ' . $a % $b;}echo '<br><br>';//Работа с модулем//3. Даны переменные $a и $b. Найдите найдите модуль разности $a//и $b. Проверьте работу скрипта самостоятельно для различных $a и $b.$a = 3;$b = 11;echo 'Модуль разности равен: ' . abs(($a - $b));echo '<br><br>';//4. Даны переменные $a и $b. Отнимите от $a переменную $b и//результат присвойте переменной $c. Сделайте так, чтобы в любом//случае в переменную $c записалось положительное значение.//Проверьте работу скрипта при $a и $b, равных соответственно 3 и 5, 6 и 1.$a = 6;$b = 1;$c = abs($a - $b);echo '<br><br>';//Работа со степенью и корнем//5. Возведите 2 в 10 степень. Результат запишите в переменную $st.$st = pow(2, 10);echo $st;echo '<br><br>';//6. Найдите квадратный корень из 245.$st = 245;echo sqrt($st);echo '<br><br>';//7. Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите//квадратный корень из суммы квадратов его элементов. Для//решения воспользуйтесь циклом foreach.$arr = array(4, 2, 5, 19, 13, 0, 10);$i = 0;foreach ($arr as $val) {    $i = $i + pow($val, 2);}echo sqrt($i);echo '<br><br>';//Работа с функциями округления//8. Найдите квадратный корень из 379. Результат округлите до//целых, до десятых, до сотых.$i = 379;echo round(sqrt($i), 0) . "<br>";echo round(sqrt($i), 1) . "<br>";echo round(sqrt($i), 2) . "<br>";echo '<br><br>';//9. Найдите квадратный корень из 587. Округлите результат в//большую и меньшую сторону, запишите результаты округления в//ассоциативный массив с ключами 'floor' и 'ceil'.$i = sqrt(587);$arr['floor'] = floor($i);$arr['ceil'] = ceil($i);print_r($arr);echo '<br><br>';//Работа с min и max//10. Даны числа 4, ­2, 5, 19, ­130, 0, 10. Найдите минимальное//и максимальное число.echo max(4, -2, 5, 19, -130, 0, 10) . "<br>";echo min(4, -2, 5, 19, -130, 0, 10);echo '<br><br>';//Работа с рандомом//11. Выведите на экран случайное число от 1 до 100.echo mt_rand(1, 100);echo '<br><br>';//12. Сделайте так, чтобы каждый раз при обновлении страницы на//экран выводилась случайным образом одна из трех картинок.//echo "<img src='http://uskov.com.ua/wp-content/uploads/2015/04/php-elephant.png'>";$img[0] = '<img src=\'http://uskov.com.ua/wp-content/uploads/2015/04/php-elephant.png\'>';$img[1] = '<img src=\'http://www.endivesoftware.com/wp-content/uploads/2015/08/1-4fac83467069c.png\'>';$img[2] = '<img src=\'http://mrafalko.com/files/22172b280ac75fa3388e2e3b63218dcc_lrg.png\'>';$i = mt_rand(0, 2);echo $img[$i];echo '<br><br>';//13. Заполните массив 10­ю случайными числами. (Подсказка://нужно воспользоваться циклами for или while).for ($i = 0; $i <= 10; $i++) {    $arr[] = mt_rand();}print_r($arr);echo '<br><br>';//Общие задачи//14. Напишите скрипт, который будет находить корни квадратного уравнения.//a * x^2 + b * x + c = 0 - квадратное уравнение$a = -5;//значение перого коэфициента$b = -5;//значение второго коэфициента$c = 10;//значение свободного члена$x1 = 0;//первий корень уравнения$x2 = 0;//второй корень уравнения$D = pow($b, 2) - (4 * $a * $c);//расчет дискриминантаif ($D > 0) {    $x1 = (-$b + sqrt($D)) / (2 * $a);    $x2 = (-$b - sqrt($D)) / (2 * $a);    echo 'Корни уравнения: ' . $x1 . ' и ' . $x2;} elseif ($D == 0) {    $x1 = -$b / (2 * $a);    echo 'Корень уравнения: ' . $x1;} elseif ($D < 0) {    echo 'Нет решений';}echo '<br><br>';//15. Напишите скрипт, который будет находить факториал числа.//Факториал — это произведение всех целых чисел, меньше данного.//Например, 4! = 1*2*3*4 = 24.$a = 6;$factorial = 1;for ($i = 1; $i <= $a; $i++) {    $factorial = $factorial * $i;}echo 'Факториал ' . $a . ' равен ' . $factorial;echo '<br><br>';//16. Напишите скрипт, который проверяет, является ли данное//число простым (простое число — это то, которое делится только на 1 и на само себя).//функция проверки являеться ли число простимfunction isprime_first($a) {    // 1 - не простое число, его нужно исключить из общей проверки    if ($a == 1) {        return 'Число ' . $a . ' не простое';    }    // перебираем возможные делители от 2 до корня квадратного из $a    for ($i = 2; $i * $i <= $a; $i++) {        // если разделилось нацело, то не простое        if ($a % $i == 0) {            return 'Число ' . $a . ' не простое';        }    }    return 'Число ' . $a . ' простое';}$a = mt_rand(1, 100);echo isprime_first($a);echo '<br><br>';//17. Дан массив $arr. Найдите среднее арифметическое его элементов. Подсказка: количество элементов массива можно//подсчитать функцией count. Проверьте задачу на массиве с элементами 12, 15, 20, 25, 59, 79.$arr = array(12, 15, 20, 25, 59, 79);$sum = 0;foreach ($arr as $val) {    $sum = $sum + $val;}$sr_znach = $sum / count($arr);echo $sr_znach;echo '<br><br>';//18. Напишите скрипт­калькулятор единого налога. Налог считается так: если вы заработали менее, чем ставка $stavka//этого налога, умноженная на 30 — то платите ставку. Если же вы заработали более, чем 30*$stavka, то платите не только ставку//налога, но и 5% от той суммы, на которую вы превысили 30*$stavka.$dochod = 10000;$nalog = 0;$stavka = 500;$basa = 30 * $stavka;if ($dochod < $basa) {    $nalog = $stavka;} elseif ($dochod > $basa) {    $nalog = $stavka + (0.05 * ($dochod - $basa));}echo '<br><br>';//19. Напишите скрипт­калькулятор оплаты за электроэнергию.//Сумма считается так: если вы потратили за месяц менее 150//киловатт, то сумма считается по одной ставке $summ1 за 1//киловатт, всё, что больше 150 и меньше 300 киловатт считается//по ставке $summ2, а все киловатты после 300 — по ставке $summ3 .$kVt = 300;$sum1 = 3;$sum2 = 4;$sum3 = 5;$k_oplate = 0;if ($kVt <= 150) {    $k_oplate = $kVt * $sum1;} elseif ($kVt > 150 && $kVt <= 300) {    $k_oplate = $kVt * $sum2;} elseif ($kVt > 300) {    $k_oplate = $kVt * $sum3;}echo '<br><br>';//20. Напишите скрипт, который найдет все простые числа в//заданном промежутке. Проверьте его работу на промежутке от 1 до 1000.function isprime_second($a) {    // 1 - не простое число    if ($a == 1) {        return false;    }    // перебираем возможные делители от 2 до sqrt($a)    for ($i = 2; $i * $i <= $a; $i++) {        // если разделилось нацело, то составное        if ($a % $i == 0) {            return false;        }    }    return true;}$prime = array();for ($i = 1; $i <= 100; $i++) {    if (isprime_second($i)) {        $prime[] = $i;    }}print_r($prime);echo '<br><br>';////21. Напишите скрипт, который будет находить тройки целых////чисел, удовлетворяющих теореме Пифагора.$n = 2;for ($a = 2; $a <= 100; $a++) {    for ($b = $a + 1; $b <= 100; $b++) {        for ($c = $b + 1; $c <= 100; $c++) {            $a2 = pow($a, $n);            $b2 = pow($b, $n);            $c2 = pow($c, $n);            if ($a2 + $b2 == $c2) {                echo $a . '^2 + ' . $b . '^2 = ' . $c . '^2';                echo '<br>';            }        }    }}